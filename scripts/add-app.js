#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const { program } = require('commander');
const chalk = require('chalk');

// ASCII art –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
const figlet = require('figlet');

console.log(chalk.cyan(figlet.textSync('Chang\'an', { horizontalLayout: 'full' })));
console.log(chalk.green('üöó App Store - Add New App Tool\n'));

program
  .name('add-app')
  .description('Add new application to Chang\'an App Store')
  .version('1.0.0');

program
  .option('-n, --name <name>', 'Application name')
  .option('-p, --package <package>', 'Android package name')
  .option('-d, --developer <developer>', 'Developer name')
  .option('-c, --category <category>', 'App category (1=video, 7=music, etc.)')
  .option('-s, --slogan <slogan>', 'App slogan')
  .option('-desc, --description <description>', 'App description')
  .option('-v, --version <version>', 'App version', '1.0.0')
  .option('-apk, --apk-file <path>', 'Path to APK file')
  .option('-i, --icon <path>', 'Path to icon file')
  .option('--featured', 'Mark as featured app', false)
  .option('--interactive', 'Interactive mode', false);

program.parse();

const options = program.opts();

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
const APPS_STORE_PATH = path.join(__dirname, '..', 'apps', 'store');
const STATIC_PATH = path.join(__dirname, '..', 'static');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫
if (!fs.existsSync(APPS_STORE_PATH)) {
  fs.mkdirSync(APPS_STORE_PATH, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function generateAppId() {
  const timestamp = Date.now().toString();
  const random = Math.random().toString(36).substring(2, 8);
  return timestamp + random;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
function createSafeFolderName(name) {
  return name.toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '')  // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    .replace(/\s+/g, '-')          // –ü—Ä–æ–±–µ–ª—ã –≤ –¥–µ—Ñ–∏—Å—ã
    .replace(/-+/g, '-')           // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
    .replace(/^-|-$/g, '');        // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ MD5 —Ö–µ—à–∞ —Ñ–∞–π–ª–∞
function calculateFileHash(filePath) {
  if (!fs.existsSync(filePath)) {
    throw new Error(`File not found: ${filePath}`);
  }
  
  const fileBuffer = fs.readFileSync(filePath);
  const hashSum = crypto.createHash('md5');
  hashSum.update(fileBuffer);
  return hashSum.digest('hex');
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function getFileSize(filePath) {
  if (!fs.existsSync(filePath)) {
    throw new Error(`File not found: ${filePath}`);
  }
  
  const stats = fs.statSync(filePath);
  return stats.size;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function createAppStructure(appData) {
  const appId = generateAppId();
  const folderName = createSafeFolderName(appData.name);
  const appPath = path.join(APPS_STORE_PATH, folderName);
  
  console.log(chalk.blue(`üìÅ Creating app structure for: ${appData.name}`));
  console.log(chalk.gray(`   App ID: ${appId}`));
  console.log(chalk.gray(`   Folder: ${folderName}`));
  
  // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  if (fs.existsSync(appPath)) {
    console.log(chalk.yellow(`‚ö†Ô∏è  App folder already exists: ${folderName}`));
    const timestamp = Date.now();
    const newFolderName = `${folderName}-${timestamp}`;
    const newAppPath = path.join(APPS_STORE_PATH, newFolderName);
    console.log(chalk.yellow(`   Using: ${newFolderName}`));
    appPath = newAppPath;
    folderName = newFolderName;
  }
  
  fs.mkdirSync(appPath, { recursive: true });
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
  const releasesPath = path.join(appPath, 'releases', appData.version);
  const screenshotsPath = path.join(appPath, 'screenshots');
  
  fs.mkdirSync(releasesPath, { recursive: true });
  fs.mkdirSync(screenshotsPath, { recursive: true });
  
  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  const staticIconsPath = path.join(STATIC_PATH, 'icons', folderName);
  const staticApksPath = path.join(STATIC_PATH, 'apks', folderName, appData.version);
  const staticScreenshotsPath = path.join(STATIC_PATH, 'screenshots', folderName);
  
  fs.mkdirSync(staticIconsPath, { recursive: true });
  fs.mkdirSync(staticApksPath, { recursive: true });
  fs.mkdirSync(staticScreenshotsPath, { recursive: true });
  
  // –ö–æ–ø–∏—Ä—É–µ–º APK —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
  let apkInfo = null;
  if (appData.apkFile && fs.existsSync(appData.apkFile)) {
    const apkFileName = 'app.apk';
    const targetApkPath = path.join(releasesPath, apkFileName);
    const staticApkPath = path.join(staticApksPath, apkFileName);
    
    console.log(chalk.blue(`üì± Copying APK file...`));
    fs.copyFileSync(appData.apkFile, targetApkPath);
    fs.copyFileSync(appData.apkFile, staticApkPath);
    
    apkInfo = {
      version: appData.version,
      version_number: parseVersionNumber(appData.version),
      apk_filename: apkFileName,
      file_size: getFileSize(targetApkPath),
      hash_code: calculateFileHash(targetApkPath),
      hash_type: "md5",
      release_notes: `Initial release version ${appData.version}`,
      min_android_version: "5.0",
      target_android_version: "13.0",
      permissions: ["INTERNET", "ACCESS_NETWORK_STATE"],
      released_at: new Date().toISOString()
    };
    
    console.log(chalk.green(`‚úÖ APK copied and processed`));
    console.log(chalk.gray(`   Size: ${apkInfo.file_size} bytes`));
    console.log(chalk.gray(`   Hash: ${apkInfo.hash_code}`));
  }
  
  // –ö–æ–ø–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
  if (appData.iconFile && fs.existsSync(appData.iconFile)) {
    const iconFileName = 'icon.png';
    const targetIconPath = path.join(appPath, iconFileName);
    const staticIconPath = path.join(staticIconsPath, iconFileName);
    
    console.log(chalk.blue(`üñºÔ∏è  Copying icon file...`));
    fs.copyFileSync(appData.iconFile, targetIconPath);
    fs.copyFileSync(appData.iconFile, staticIconPath);
    console.log(chalk.green(`‚úÖ Icon copied`));
  }
  
  return { appId, folderName, appPath, apkInfo };
}

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—Å–∏–∏
function parseVersionNumber(version) {
  const parts = version.split('.').map(Number);
  return parts[0] * 10000 + (parts[1] || 0) * 100 + (parts[2] || 0);
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è metadata.json
function createMetadataJson(appData, appId, folderName) {
  const metadata = {
    app_id: appId,
    name: appData.name,
    package_name: appData.package,
    developer: appData.developer || "Unknown Developer",
    category: appData.category || "99",
    type: appData.category || "99",
    slogan: appData.slogan || `${appData.name} - –æ—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`,
    description: appData.description || `–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${appData.name}`,
    tags: ["mobile", "android"],
    featured: appData.featured || false,
    restricted_state: 0,
    uninstall: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };
  
  return metadata;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function addApp() {
  try {
    console.log(chalk.blue('üöÄ Starting app creation process...\n'));
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    const appData = {
      name: options.name || 'Sample App',
      package: options.package || 'com.example.sampleapp',
      developer: options.developer || 'Unknown Developer',
      category: options.category || '99',
      slogan: options.slogan,
      description: options.description,
      version: options.version || '1.0.0',
      apkFile: options.apkFile,
      iconFile: options.icon,
      featured: options.featured
    };
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!appData.name) {
      console.log(chalk.red('‚ùå App name is required!'));
      console.log(chalk.gray('Use: --name "Your App Name"'));
      process.exit(1);
    }
    
    console.log(chalk.green('üìã App Information:'));
    console.log(chalk.gray(`   Name: ${appData.name}`));
    console.log(chalk.gray(`   Package: ${appData.package}`));
    console.log(chalk.gray(`   Developer: ${appData.developer}`));
    console.log(chalk.gray(`   Category: ${appData.category}`));
    console.log(chalk.gray(`   Version: ${appData.version}`));
    console.log(chalk.gray(`   Featured: ${appData.featured ? 'Yes' : 'No'}`));
    if (appData.apkFile) {
      console.log(chalk.gray(`   APK File: ${appData.apkFile}`));
    }
    if (appData.iconFile) {
      console.log(chalk.gray(`   Icon File: ${appData.iconFile}`));
    }
    console.log('');
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const { appId, folderName, appPath, apkInfo } = await createAppStructure(appData);
    
    // –°–æ–∑–¥–∞–µ–º metadata.json
    console.log(chalk.blue('üìù Creating metadata.json...'));
    const metadata = createMetadataJson(appData, appId, folderName);
    const metadataPath = path.join(appPath, 'metadata.json');
    fs.writeFileSync(metadataPath, JSON.stringify(metadata, null, 2));
    console.log(chalk.green('‚úÖ metadata.json created'));
    
    // –°–æ–∑–¥–∞–µ–º info.json –¥–ª—è –≤–µ—Ä—Å–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å APK
    if (apkInfo) {
      console.log(chalk.blue('üìù Creating version info.json...'));
      const versionInfoPath = path.join(appPath, 'releases', appData.version, 'info.json');
      fs.writeFileSync(versionInfoPath, JSON.stringify(apkInfo, null, 2));
      console.log(chalk.green('‚úÖ info.json created'));
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    const readmePath = path.join(appPath, 'screenshots', 'README.md');
    fs.writeFileSync(readmePath, '# Screenshots\n\nAdd app screenshots here (PNG/JPEG format).\n');
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    console.log('\n' + chalk.green('üéâ App successfully created!'));
    console.log(chalk.cyan('üìÅ App Location:'));
    console.log(chalk.gray(`   ${appPath}`));
    console.log('\n' + chalk.cyan('üìã Next Steps:'));
    console.log(chalk.gray('   1. Add screenshots to: screenshots/ folder'));
    console.log(chalk.gray('   2. Start server: npm start'));
    console.log(chalk.gray(`   3. Check app: curl http://localhost:3000/hu-apigw/appstore/api/v1/app/details?app_id=${appId}`));
    
    console.log('\n' + chalk.cyan('üîß Files Created:'));
    console.log(chalk.gray(`   ‚úÖ ${path.join(folderName, 'metadata.json')}`));
    if (apkInfo) {
      console.log(chalk.gray(`   ‚úÖ ${path.join(folderName, 'releases', appData.version, 'info.json')}`));
      console.log(chalk.gray(`   ‚úÖ ${path.join(folderName, 'releases', appData.version, 'app.apk')}`));
    }
    if (appData.iconFile) {
      console.log(chalk.gray(`   ‚úÖ ${path.join(folderName, 'icon.png')}`));
    }
    console.log(chalk.gray(`   ‚úÖ Static files copied to /static`));
    
  } catch (error) {
    console.log('\n' + chalk.red('‚ùå Error creating app:'));
    console.log(chalk.red(error.message));
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  addApp();
}

module.exports = { addApp };
